
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tknousjzmfaoucblieox.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRrbm91c2p6bWZhb3VjYmxpZW94Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwOTUxMjcsImV4cCI6MjA1ODY3MTEyN30.sh66ZX6eV6-69xE22BQ5Oj8O0ngrlBvojB1RVFT2Mj4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to convert between database and frontend formats
export const transformOffenderFromDB = (offenderRecord: any): any => {
  if (!offenderRecord) return null;
  
  // Parse WKB/WKT format or extract coordinates from PostGIS point
  let coordinates: [number, number] = [0, 0];
  
  if (offenderRecord.location) {
    try {
      // Extract coordinates from PostGIS geography point
      // The format is typically 'POINT(longitude latitude)'
      const match = offenderRecord.location.match(/POINT\(([^ ]+) ([^)]+)\)/);
      if (match && match.length === 3) {
        coordinates = [parseFloat(match[1]), parseFloat(match[2])];
      }
    } catch (error) {
      console.error('Error parsing coordinates:', error);
    }
  }
  
  return {
    id: offenderRecord.id,
    name: offenderRecord.name,
    offenseType: offenderRecord.offense_type,
    registrationStatus: offenderRecord.registration_status,
    convictionDate: offenderRecord.conviction_date,
    lastKnownAddress: offenderRecord.last_known_address,
    coordinates: coordinates,
    crimeDetails: offenderRecord.crime_details || '',
    lastUpdate: offenderRecord.last_update
  };
};

export const transformOffenderToDB = (offender: any) => {
  const [longitude, latitude] = offender.coordinates;
  
  return {
    name: offender.name,
    offense_type: offender.offenseType,
    registration_status: offender.registrationStatus,
    conviction_date: offender.convictionDate,
    last_known_address: offender.lastKnownAddress,
    // For PostGIS, we need to use ST_MakePoint and geography type casting
    location: `POINT(${longitude} ${latitude})`,
    crime_details: offender.crimeDetails,
    last_update: new Date().toISOString()
  };
};
